# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SpeechBrain
# This file is distributed under the same license as the SpeechBrain
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpeechBrain \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-07 13:45+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../API/speechbrain.lobes.models.dual_path.rst:5
msgid "speechbrain.lobes.models.dual_path module"
msgstr ""

#: of speechbrain.lobes.models.dual_path:1
msgid "Library to support dual-path speech separation."
msgstr ""

#: of speechbrain.lobes.models.dual_path:8
msgid "Authors"
msgstr ""

#: of speechbrain.lobes.models.dual_path:4
msgid "Cem Subakan 2020"
msgstr ""

#: of speechbrain.lobes.models.dual_path:5
msgid "Mirco Ravanelli 2020"
msgstr ""

#: of speechbrain.lobes.models.dual_path:6
msgid "Samuele Cornell 2020"
msgstr ""

#: of speechbrain.lobes.models.dual_path:7
msgid "Mirko Bronzi 2020"
msgstr ""

#: of speechbrain.lobes.models.dual_path:8
msgid "Jianyuan Zhong 2020"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:16
msgid "Summary"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:18
msgid "Classes:"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1
msgid ""
":obj:`CumulativeLayerNorm "
"<speechbrain.lobes.models.dual_path.CumulativeLayerNorm>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.CumulativeLayerNorm:1
msgid "Calculate Cumulative Layer Normalization."
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1
msgid ":obj:`DPTNetBlock <speechbrain.lobes.models.dual_path.DPTNetBlock>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.DPTNetBlock:1
msgid "The DPT Net block."
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1
msgid ":obj:`Decoder <speechbrain.lobes.models.dual_path.Decoder>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.Decoder:1
msgid "A decoder layer that consists of ConvTranspose1d."
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1
msgid ""
":obj:`Dual_Computation_Block "
"<speechbrain.lobes.models.dual_path.Dual_Computation_Block>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.Dual_Computation_Block:1
msgid "Computation block for dual-path processing."
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1
msgid ""
":obj:`Dual_Path_Model "
"<speechbrain.lobes.models.dual_path.Dual_Path_Model>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.Dual_Path_Model:1
msgid "The dual path model which is the basis for dualpathrnn, sepformer, dptnet."
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1
msgid ":obj:`Encoder <speechbrain.lobes.models.dual_path.Encoder>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.Encoder:1
msgid "Convolutional Encoder Layer."
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1
msgid ""
":obj:`FastTransformerBlock "
"<speechbrain.lobes.models.dual_path.FastTransformerBlock>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.FastTransformerBlock:1
msgid ""
"This block is used to implement fast transformer models with efficient "
"attention."
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1
msgid ""
":obj:`GlobalLayerNorm "
"<speechbrain.lobes.models.dual_path.GlobalLayerNorm>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.GlobalLayerNorm:1
msgid "Calculate Global Layer Normalization."
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1
msgid ":obj:`IdentityBlock <speechbrain.lobes.models.dual_path.IdentityBlock>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.IdentityBlock:1
msgid ""
"This block is used when we want to have identity transformation within "
"the Dual_path block."
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1
msgid ""
":obj:`PyTorchPositionalEncoding "
"<speechbrain.lobes.models.dual_path.PyTorchPositionalEncoding>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.PyTorchPositionalEncoding:1
msgid "Positional encoder for the pytorch transformer."
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1
msgid ""
":obj:`PytorchTransformerBlock "
"<speechbrain.lobes.models.dual_path.PytorchTransformerBlock>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.PytorchTransformerBlock:1
msgid "A wrapper that uses the pytorch transformer block."
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1
msgid ""
":obj:`SBConformerEncoderBlock "
"<speechbrain.lobes.models.dual_path.SBConformerEncoderBlock>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.SBConformerEncoderBlock:1
msgid "A wrapper for the SpeechBrain implementation of the ConformerEncoder."
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1
msgid ":obj:`SBRNNBlock <speechbrain.lobes.models.dual_path.SBRNNBlock>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.SBRNNBlock:1
msgid "RNNBlock for the dual path pipeline."
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1
msgid ""
":obj:`SBTransformerBlock "
"<speechbrain.lobes.models.dual_path.SBTransformerBlock>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.SBTransformerBlock:1
msgid "A wrapper for the SpeechBrain implementation of the transformer encoder."
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1
msgid ""
":obj:`SepformerWrapper "
"<speechbrain.lobes.models.dual_path.SepformerWrapper>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:38:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.SepformerWrapper:1
msgid ""
"The wrapper for the sepformer model which combines the Encoder, Masknet "
"and the decoder https://arxiv.org/abs/2010.13154"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:39
msgid "Functions:"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:52:<autosummary>:1
msgid ":obj:`select_norm <speechbrain.lobes.models.dual_path.select_norm>`"
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:52:<autosummary>:1 of
#: speechbrain.lobes.models.dual_path.select_norm:1
msgid "Just a wrapper to select the normalization type."
msgstr ""

#: ../../API/speechbrain.lobes.models.dual_path.rst:54
msgid "Reference"
msgstr ""

#: of speechbrain.lobes.models.dual_path.DPTNetBlock:1
#: speechbrain.lobes.models.dual_path.Dual_Computation_Block:1
#: speechbrain.lobes.models.dual_path.Dual_Path_Model:1
#: speechbrain.lobes.models.dual_path.Encoder:1
#: speechbrain.lobes.models.dual_path.FastTransformerBlock:1
#: speechbrain.lobes.models.dual_path.GlobalLayerNorm:1
#: speechbrain.lobes.models.dual_path.PyTorchPositionalEncoding:1
#: speechbrain.lobes.models.dual_path.PytorchTransformerBlock:1
#: speechbrain.lobes.models.dual_path.SBConformerEncoderBlock:1
#: speechbrain.lobes.models.dual_path.SBRNNBlock:1
#: speechbrain.lobes.models.dual_path.SBTransformerBlock:1
#: speechbrain.lobes.models.dual_path.SepformerWrapper:1
msgid "Bases: :class:`torch.nn.modules.module.Module`"
msgstr ""

#: of speechbrain.lobes.models.dual_path.CumulativeLayerNorm.forward
#: speechbrain.lobes.models.dual_path.DPTNetBlock
#: speechbrain.lobes.models.dual_path.DPTNetBlock.forward
#: speechbrain.lobes.models.dual_path.Decoder
#: speechbrain.lobes.models.dual_path.Decoder.forward
#: speechbrain.lobes.models.dual_path.Dual_Computation_Block
#: speechbrain.lobes.models.dual_path.Dual_Computation_Block.forward
#: speechbrain.lobes.models.dual_path.Dual_Path_Model
#: speechbrain.lobes.models.dual_path.Dual_Path_Model.forward
#: speechbrain.lobes.models.dual_path.Encoder
#: speechbrain.lobes.models.dual_path.Encoder.forward
#: speechbrain.lobes.models.dual_path.FastTransformerBlock
#: speechbrain.lobes.models.dual_path.FastTransformerBlock.forward
#: speechbrain.lobes.models.dual_path.GlobalLayerNorm
#: speechbrain.lobes.models.dual_path.GlobalLayerNorm.forward
#: speechbrain.lobes.models.dual_path.PyTorchPositionalEncoding
#: speechbrain.lobes.models.dual_path.PyTorchPositionalEncoding.forward
#: speechbrain.lobes.models.dual_path.PytorchTransformerBlock
#: speechbrain.lobes.models.dual_path.PytorchTransformerBlock.forward
#: speechbrain.lobes.models.dual_path.SBConformerEncoderBlock
#: speechbrain.lobes.models.dual_path.SBConformerEncoderBlock.forward
#: speechbrain.lobes.models.dual_path.SBRNNBlock
#: speechbrain.lobes.models.dual_path.SBRNNBlock.forward
#: speechbrain.lobes.models.dual_path.SBTransformerBlock
#: speechbrain.lobes.models.dual_path.SBTransformerBlock.forward
#: speechbrain.lobes.models.dual_path.SepformerWrapper
msgid "Parameters"
msgstr ""

#: of speechbrain.lobes.models.dual_path.GlobalLayerNorm:3
msgid "Input shape from an expected input of size."
msgstr ""

#: of speechbrain.lobes.models.dual_path.GlobalLayerNorm:5
msgid "A value added to the denominator for numerical stability."
msgstr ""

#: of speechbrain.lobes.models.dual_path.GlobalLayerNorm:7
msgid ""
"A boolean value that when set to True, this module has learnable per-"
"element affine parameters initialized to ones (for weights) and zeros "
"(for biases)."
msgstr ""

#: of speechbrain.lobes.models.dual_path.CumulativeLayerNorm:11
#: speechbrain.lobes.models.dual_path.Decoder:11
#: speechbrain.lobes.models.dual_path.Dual_Computation_Block:17
#: speechbrain.lobes.models.dual_path.Dual_Path_Model:29
#: speechbrain.lobes.models.dual_path.Encoder:11
#: speechbrain.lobes.models.dual_path.FastTransformerBlock:24
#: speechbrain.lobes.models.dual_path.GlobalLayerNorm:13
#: speechbrain.lobes.models.dual_path.IdentityBlock:4
#: speechbrain.lobes.models.dual_path.PyTorchPositionalEncoding:11
#: speechbrain.lobes.models.dual_path.PytorchTransformerBlock:19
#: speechbrain.lobes.models.dual_path.SBConformerEncoderBlock:29
#: speechbrain.lobes.models.dual_path.SBRNNBlock:17
#: speechbrain.lobes.models.dual_path.SBTransformerBlock:27
#: speechbrain.lobes.models.dual_path.SepformerWrapper:48
msgid "Example"
msgstr ""

#: of speechbrain.lobes.models.dual_path.CumulativeLayerNorm.forward:1
#: speechbrain.lobes.models.dual_path.GlobalLayerNorm.forward:1
msgid "Returns the normalized tensor."
msgstr ""

#: of speechbrain.lobes.models.dual_path.GlobalLayerNorm.forward:3
msgid "Tensor of size [N, C, K, S] or [N, C, L]."
msgstr ""

#: of speechbrain.lobes.models.dual_path.CumulativeLayerNorm:1
msgid "Bases: :class:`torch.nn.modules.normalization.LayerNorm`"
msgstr ""

#: of speechbrain.lobes.models.dual_path.CumulativeLayerNorm:5
msgid "dim"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of speechbrain.lobes.models.dual_path.CumulativeLayerNorm:6
msgid "Dimension that you want to normalize."
msgstr ""

#: of speechbrain.lobes.models.dual_path.CumulativeLayerNorm:8
msgid "elementwise_affine"
msgstr ""

#: of
msgid "True"
msgstr ""

#: of speechbrain.lobes.models.dual_path.CumulativeLayerNorm:8
msgid "Learnable per-element affine parameters."
msgstr ""

#: of speechbrain.lobes.models.dual_path.CumulativeLayerNorm.forward:3
msgid "Tensor size [N, C, K, S] or [N, C, L]"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Decoder:3
#: speechbrain.lobes.models.dual_path.Encoder:3
msgid "Length of filters."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Decoder:5
#: speechbrain.lobes.models.dual_path.Encoder:5
msgid "Number of  input channels."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Decoder:7
#: speechbrain.lobes.models.dual_path.Encoder:7
msgid "Number of output channels."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Encoder.forward:1
msgid "Return the encoded output."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Encoder.forward:3
msgid "Input tensor with dimensionality [B, L]."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block.forward
#: speechbrain.lobes.models.dual_path.Dual_Path_Model.forward
#: speechbrain.lobes.models.dual_path.Encoder.forward
msgid "Returns"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Encoder.forward:6
msgid ""
"* **x** (*torch.Tensor*) -- Encoded tensor with dimensionality [B, N, "
"T_out]. * *where B = Batchsize* -- L = Number of timepoints   N = Number "
"of filters   T_out = Number of timepoints at the output of the encoder"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Encoder.forward:6
msgid ""
"**x** (*torch.Tensor*) -- Encoded tensor with dimensionality [B, N, "
"T_out]."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Encoder.forward:7
msgid ""
"*where B = Batchsize* -- L = Number of timepoints N = Number of filters "
"T_out = Number of timepoints at the output of the encoder"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Decoder:1
msgid "Bases: :class:`torch.nn.modules.conv.ConvTranspose1d`"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Decoder.forward:1
msgid "Return the decoded output."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Decoder.forward:3
msgid ""
"Input tensor with dimensionality [B, N, L].     where, B = Batchsize,"
"            N = number of filters            L = time points"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Decoder.forward:6
msgid "Input tensor with dimensionality [B, N, L]."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Decoder.forward:6
msgid "where, B = Batchsize,"
msgstr ""

#: of speechbrain.lobes.models.dual_path.DPTNetBlock.forward:5
#: speechbrain.lobes.models.dual_path.Decoder.forward:6
#: speechbrain.lobes.models.dual_path.FastTransformerBlock.forward:5
#: speechbrain.lobes.models.dual_path.PyTorchPositionalEncoding.forward:5
#: speechbrain.lobes.models.dual_path.PytorchTransformerBlock.forward:5
#: speechbrain.lobes.models.dual_path.SBRNNBlock.forward:5
msgid "N = number of filters L = time points"
msgstr ""

#: of speechbrain.lobes.models.dual_path.IdentityBlock:1
msgid "Bases: :class:`object`"
msgstr ""

#: of speechbrain.lobes.models.dual_path.FastTransformerBlock:3
msgid "The implementations are taken from https://fast-transformers.github.io/"
msgstr ""

#: of speechbrain.lobes.models.dual_path.FastTransformerBlock:5
msgid ""
"Specifies the type of attention. Check https://fast-"
"transformers.github.io/  for details."
msgstr ""

#: of speechbrain.lobes.models.dual_path.FastTransformerBlock:8
#: speechbrain.lobes.models.dual_path.PytorchTransformerBlock:3
#: speechbrain.lobes.models.dual_path.SBConformerEncoderBlock:5
#: speechbrain.lobes.models.dual_path.SBTransformerBlock:5
msgid "Dimensionality of the representation."
msgstr ""

#: of speechbrain.lobes.models.dual_path.FastTransformerBlock:10
#: speechbrain.lobes.models.dual_path.PytorchTransformerBlock:5
#: speechbrain.lobes.models.dual_path.SBConformerEncoderBlock:3
#: speechbrain.lobes.models.dual_path.SBTransformerBlock:3
msgid "Number of layers."
msgstr ""

#: of speechbrain.lobes.models.dual_path.FastTransformerBlock:12
#: speechbrain.lobes.models.dual_path.PytorchTransformerBlock:7
#: speechbrain.lobes.models.dual_path.SBConformerEncoderBlock:7
#: speechbrain.lobes.models.dual_path.SBTransformerBlock:7
msgid "Number of attention heads."
msgstr ""

#: of speechbrain.lobes.models.dual_path.FastTransformerBlock:14
msgid "Dimensionality of positional feed-forward."
msgstr ""

#: of speechbrain.lobes.models.dual_path.FastTransformerBlock:16
#: speechbrain.lobes.models.dual_path.PytorchTransformerBlock:11
msgid "Dropout drop rate."
msgstr ""

#: of speechbrain.lobes.models.dual_path.FastTransformerBlock:18
#: speechbrain.lobes.models.dual_path.PytorchTransformerBlock:13
#: speechbrain.lobes.models.dual_path.SBConformerEncoderBlock:19
#: speechbrain.lobes.models.dual_path.SBTransformerBlock:19
msgid "Activation function."
msgstr ""

#: of speechbrain.lobes.models.dual_path.FastTransformerBlock:20
msgid "bucket size for reformer."
msgstr ""

#: of speechbrain.lobes.models.dual_path.FastTransformerBlock:25
msgid ""
"# >>> x = torch.randn(10, 100, 64) # >>> block = "
"FastTransformerBlock('linear', 64) # >>> x = block(x) # >>> x.shape # "
"torch.Size([10, 100, 64])"
msgstr ""

#: of speechbrain.lobes.models.dual_path.FastTransformerBlock.forward:1
msgid "Returns the transformed input."
msgstr ""

#: of speechbrain.lobes.models.dual_path.FastTransformerBlock.forward:3
msgid ""
"Tensor shaper [B, L, N]. where, B = Batchsize,        N = number of "
"filters        L = time points"
msgstr ""

#: of speechbrain.lobes.models.dual_path.FastTransformerBlock.forward:3
msgid "Tensor shaper [B, L, N]. where, B = Batchsize,"
msgstr ""

#: of speechbrain.lobes.models.dual_path.PyTorchPositionalEncoding:3
msgid "Representation dimensionality."
msgstr ""

#: of speechbrain.lobes.models.dual_path.PyTorchPositionalEncoding:5
msgid "Dropout drop prob."
msgstr ""

#: of speechbrain.lobes.models.dual_path.PyTorchPositionalEncoding:7
msgid "Max sequence length."
msgstr ""

#: of speechbrain.lobes.models.dual_path.PyTorchPositionalEncoding.forward:1
msgid "Returns the encoded output."
msgstr ""

#: of speechbrain.lobes.models.dual_path.PyTorchPositionalEncoding.forward:3
msgid ""
"Tensor shape [B, L, N], where, B = Batchsize,        N = number of "
"filters        L = time points"
msgstr ""

#: of speechbrain.lobes.models.dual_path.PyTorchPositionalEncoding.forward:3
#: speechbrain.lobes.models.dual_path.SBConformerEncoderBlock.forward:3
#: speechbrain.lobes.models.dual_path.SBTransformerBlock.forward:3
msgid "Tensor shape [B, L, N], where, B = Batchsize,"
msgstr ""

#: of speechbrain.lobes.models.dual_path.PytorchTransformerBlock:9
#: speechbrain.lobes.models.dual_path.SBConformerEncoderBlock:9
#: speechbrain.lobes.models.dual_path.SBTransformerBlock:9
msgid "Dimensionality of positional feed forward."
msgstr ""

#: of speechbrain.lobes.models.dual_path.PytorchTransformerBlock:15
#: speechbrain.lobes.models.dual_path.SBConformerEncoderBlock:25
#: speechbrain.lobes.models.dual_path.SBTransformerBlock:21
msgid "If true we use a positional encoding."
msgstr ""

#: of speechbrain.lobes.models.dual_path.PytorchTransformerBlock.forward:1
#: speechbrain.lobes.models.dual_path.SBConformerEncoderBlock.forward:1
#: speechbrain.lobes.models.dual_path.SBRNNBlock.forward:1
#: speechbrain.lobes.models.dual_path.SBTransformerBlock.forward:1
msgid "Returns the transformed output."
msgstr ""

#: of speechbrain.lobes.models.dual_path.DPTNetBlock.forward:3
#: speechbrain.lobes.models.dual_path.PytorchTransformerBlock.forward:3
msgid ""
"Tensor shape [B, L, N] where, B = Batchsize,        N = number of filters"
"        L = time points"
msgstr ""

#: of speechbrain.lobes.models.dual_path.DPTNetBlock.forward:3
#: speechbrain.lobes.models.dual_path.PytorchTransformerBlock.forward:3
msgid "Tensor shape [B, L, N] where, B = Batchsize,"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBConformerEncoderBlock:11
#: speechbrain.lobes.models.dual_path.SBTransformerBlock:11
msgid "Shape of input."
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBConformerEncoderBlock:13
#: speechbrain.lobes.models.dual_path.SBTransformerBlock:13
msgid "Dimension of the key (Optional)."
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBConformerEncoderBlock:15
#: speechbrain.lobes.models.dual_path.SBTransformerBlock:15
msgid "Dimension of the value (Optional)."
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBConformerEncoderBlock:17
#: speechbrain.lobes.models.dual_path.SBTransformerBlock:17
msgid "Dropout rate."
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBTransformerBlock:23
msgid "Use normalization before transformations."
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBConformerEncoderBlock.forward:3
#: speechbrain.lobes.models.dual_path.SBTransformerBlock.forward:3
msgid ""
"Tensor shape [B, L, N], where, B = Batchsize,        L = time points"
"        N = number of filters"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBConformerEncoderBlock.forward:5
#: speechbrain.lobes.models.dual_path.SBTransformerBlock.forward:5
msgid "L = time points N = number of filters"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBConformerEncoderBlock:21
msgid "Kernel size in the conformer encoder"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBConformerEncoderBlock:23
msgid "Use bias or not in the convolution part of conformer encoder"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBRNNBlock:3
msgid "Dimensionality of the input features."
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBRNNBlock:5
msgid "Dimensionality of the latent layer of the rnn."
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBRNNBlock:7
msgid "Number of the rnn layers."
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBRNNBlock:9
msgid "Type of the the rnn cell."
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBRNNBlock:11
msgid "Dropout rate"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBRNNBlock:13
msgid "If True, bidirectional."
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBRNNBlock.forward:3
msgid ""
"[B, L, N] where, B = Batchsize,        N = number of filters        L = "
"time points"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SBRNNBlock.forward:3
msgid "[B, L, N] where, B = Batchsize,"
msgstr ""

#: of speechbrain.lobes.models.dual_path.DPTNetBlock:3
msgid "Number of expected features in the input (required)."
msgstr ""

#: of speechbrain.lobes.models.dual_path.DPTNetBlock:5
msgid "Number of heads in the multiheadattention models (required)."
msgstr ""

#: of speechbrain.lobes.models.dual_path.DPTNetBlock:7
msgid "Dimension of the feedforward network model (default=2048)."
msgstr ""

#: of speechbrain.lobes.models.dual_path.DPTNetBlock:9
msgid "Dropout value (default=0.1)."
msgstr ""

#: of speechbrain.lobes.models.dual_path.DPTNetBlock:11
msgid "Activation function of intermediate layer, relu or gelu (default=relu)."
msgstr ""

#: of speechbrain.lobes.models.dual_path.DPTNetBlock:15
msgid "Examples"
msgstr ""

#: of speechbrain.lobes.models.dual_path.DPTNetBlock.forward:1
msgid "Pass the input through the encoder layer."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block:3
msgid ""
"Model to process within the chunks. inter_mdl : torch.nn.module    Model "
"to process across the chunks. out_channels : int    Dimensionality of "
"inter/intra model. norm : str    Normalization type. skip_around_intra : "
"bool    Skip connection around the intra layer. "
"linear_layer_after_inter_intra : bool    Linear layer or not after inter "
"or intra."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block:3
msgid "Model to process within the chunks. inter_mdl : torch.nn.module"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block:5
msgid "Model to process across the chunks."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block:6
msgid "out_channels"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block:7
msgid "Dimensionality of inter/intra model."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block:8
msgid "norm"
msgstr ""

#: of
msgid "str"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block:9
#: speechbrain.lobes.models.dual_path.Dual_Path_Model:13
msgid "Normalization type."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block:10
msgid "skip_around_intra"
msgstr ""

#: of
msgid "bool"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block:11
msgid "Skip connection around the intra layer."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block:12
msgid "linear_layer_after_inter_intra"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block:13
msgid "Linear layer or not after inter or intra."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block.forward:1
#: speechbrain.lobes.models.dual_path.Dual_Path_Model.forward:1
msgid "Returns the output tensor."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block.forward:3
msgid "Input tensor of dimension [B, N, K, S]."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block.forward:6
msgid ""
"**out** -- Output tensor of dimension [B, N, K, S]. where, B = Batchsize,"
"    N = number of filters    K = time points in each chunk    S = the "
"number of chunks"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block.forward:6
msgid "**out** -- Output tensor of dimension [B, N, K, S]. where, B = Batchsize,"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block.forward:8
msgid ""
"N = number of filters K = time points in each chunk S = the number of "
"chunks"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Computation_Block.forward
#: speechbrain.lobes.models.dual_path.Dual_Path_Model.forward
msgid "Return type"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Path_Model:3
msgid "Number of channels at the output of the encoder."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Path_Model:5
msgid "Number of channels that would be inputted to the intra and inter blocks."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Path_Model:7
msgid "Model to process within the chunks."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Path_Model:9
msgid "model to process across the chunks,"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Path_Model:11
msgid "Number of layers of Dual Computation Block."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Path_Model:15
msgid "Chunk length."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Path_Model:17
msgid "Number of sources (speakers)."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Path_Model:19
msgid "Skip connection around intra."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Path_Model:21
msgid "Linear layer after inter and intra."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Path_Model:23
msgid "Global positional encodings."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Path_Model:25
msgid "Maximum sequence length."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Path_Model.forward:3
msgid "Input tensor of dimension [B, N, L]."
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Path_Model.forward:6
msgid ""
"**out** -- Output tensor of dimension [spks, B, N, L] where, spks = "
"Number of speakers    B = Batchsize,    N = number of filters    L = the "
"number of time points"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Path_Model.forward:6
msgid ""
"**out** -- Output tensor of dimension [spks, B, N, L] where, spks = "
"Number of speakers"
msgstr ""

#: of speechbrain.lobes.models.dual_path.Dual_Path_Model.forward:8
msgid "B = Batchsize, N = number of filters L = the number of time points"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:4
msgid "The kernel size used in the encoder"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:6
msgid "The number of channels of the input audio"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:8
msgid ""
"The number of filters used in the encoder. Also, number of channels that "
"would be inputted to the intra and inter blocks."
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:11
msgid "The chunk length that is to be processed by the intra blocks"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:13
msgid "The number of layers of combination of inter and intra blocks"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:15
msgid ""
"The normalization type to be used in the masknet Should be one of 'ln' --"
" layernorm, 'gln' -- globallayernorm                  'cln' -- cumulative"
" layernorm, 'bn' -- batchnorm                  -- see the select_norm "
"function above for more details"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:15
msgid ""
"The normalization type to be used in the masknet Should be one of 'ln' --"
" layernorm, 'gln' -- globallayernorm"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:17
msgid ""
"'cln' -- cumulative layernorm, 'bn' -- batchnorm -- see the select_norm "
"function above for more details"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:20
msgid ""
"Whether or not to use a linear layer at the output of intra and inter "
"blocks"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:22
msgid "This introduces extra skip connections around the intra block"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:24
msgid "This determines the number of sepakers to estimate"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:26
msgid "This determines the number of layers in the intra block"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:28
msgid "This determines the number of layers in the inter block"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:30
msgid "This determines the number of parallel attention heads in the intra block"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:32
msgid "This determines the number of parallel attention heads in the inter block"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:34
msgid ""
"The number of dimensions in the positional feedforward model in the inter"
" block"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:36
msgid ""
"The number of dimensions in the positional feedforward model in the intra"
" block"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:38
msgid "Whether or not to use positional encodings in the intra block"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:40
msgid "Whether or not to use positional encodings in the inter block"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:42
msgid ""
"Whether or not we use normalization before the transformations in the "
"intra block"
msgstr ""

#: of speechbrain.lobes.models.dual_path.SepformerWrapper:44
msgid ""
"Whether or not we use normalization before the transformations in the "
"inter block"
msgstr ""

#: of
#: speechbrain.lobes.models.dual_path.SepformerWrapper.reset_layer_recursively:1
msgid "Reinitializes the parameters of the network"
msgstr ""

