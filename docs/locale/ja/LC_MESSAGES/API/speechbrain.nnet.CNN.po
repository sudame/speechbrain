# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SpeechBrain
# This file is distributed under the same license as the SpeechBrain
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpeechBrain \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-07 13:45+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../API/speechbrain.nnet.CNN.rst:5
msgid "speechbrain.nnet.CNN module"
msgstr ""

#: of speechbrain.nnet.CNN:1
msgid "Library implementing convolutional neural networks."
msgstr ""

#: of speechbrain.nnet.CNN:6
msgid "Authors"
msgstr ""

#: of speechbrain.nnet.CNN:4
msgid "Mirco Ravanelli 2020"
msgstr ""

#: of speechbrain.nnet.CNN:5
msgid "Jianyuan Zhong 2020"
msgstr ""

#: of speechbrain.nnet.CNN:6
msgid "Cem Subakan 2021"
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:16
msgid "Summary"
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:18
msgid "Classes:"
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:29:<autosummary>:1
msgid ":obj:`Conv1d <speechbrain.nnet.CNN.Conv1d>`"
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:29:<autosummary>:1 of
#: speechbrain.nnet.CNN.Conv1d:1 speechbrain.nnet.CNN.Conv2d:1
msgid "This function implements 1d convolution."
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:29:<autosummary>:1
msgid ":obj:`Conv2d <speechbrain.nnet.CNN.Conv2d>`"
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:29:<autosummary>:1
msgid ":obj:`ConvTranspose1d <speechbrain.nnet.CNN.ConvTranspose1d>`"
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:29:<autosummary>:1
msgid "This class implements 1d transposed convolution with speechbrain."
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:29:<autosummary>:1
msgid ""
":obj:`DepthwiseSeparableConv1d "
"<speechbrain.nnet.CNN.DepthwiseSeparableConv1d>`"
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:29:<autosummary>:1 of
#: speechbrain.nnet.CNN.DepthwiseSeparableConv1d:1
#: speechbrain.nnet.CNN.DepthwiseSeparableConv2d:1
msgid "This class implements the depthwise separable convolution."
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:29:<autosummary>:1
msgid ""
":obj:`DepthwiseSeparableConv2d "
"<speechbrain.nnet.CNN.DepthwiseSeparableConv2d>`"
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:29:<autosummary>:1
msgid ":obj:`SincConv <speechbrain.nnet.CNN.SincConv>`"
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:29:<autosummary>:1 of
#: speechbrain.nnet.CNN.SincConv:1
msgid "This function implements SincConv (SincNet)."
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:30
msgid "Functions:"
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:44:<autosummary>:1
msgid ":obj:`get_padding_elem <speechbrain.nnet.CNN.get_padding_elem>`"
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:44:<autosummary>:1 of
#: speechbrain.nnet.CNN.get_padding_elem:1
msgid "This function computes the number of elements to add for zero-padding."
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:44:<autosummary>:1
msgid ""
":obj:`get_padding_elem_transposed "
"<speechbrain.nnet.CNN.get_padding_elem_transposed>`"
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:44:<autosummary>:1 of
#: speechbrain.nnet.CNN.get_padding_elem_transposed:1
msgid ""
"This function computes the required padding size for transposed "
"convolution"
msgstr ""

#: ../../API/speechbrain.nnet.CNN.rst:46
msgid "Reference"
msgstr ""

#: of speechbrain.nnet.CNN.Conv1d:1 speechbrain.nnet.CNN.Conv2d:1
#: speechbrain.nnet.CNN.ConvTranspose1d:1
#: speechbrain.nnet.CNN.DepthwiseSeparableConv1d:1
#: speechbrain.nnet.CNN.DepthwiseSeparableConv2d:1
#: speechbrain.nnet.CNN.SincConv:1
msgid "Bases: :class:`torch.nn.modules.module.Module`"
msgstr ""

#: of speechbrain.nnet.CNN.SincConv:3
msgid ""
"M. Ravanelli, Y. Bengio, \"Speaker Recognition from raw waveform with "
"SincNet\", in Proc. of  SLT 2018 (https://arxiv.org/abs/1808.00158)"
msgstr ""

#: of speechbrain.nnet.CNN.Conv1d speechbrain.nnet.CNN.Conv1d.forward
#: speechbrain.nnet.CNN.Conv2d speechbrain.nnet.CNN.Conv2d.forward
#: speechbrain.nnet.CNN.ConvTranspose1d
#: speechbrain.nnet.CNN.ConvTranspose1d.forward
#: speechbrain.nnet.CNN.DepthwiseSeparableConv1d
#: speechbrain.nnet.CNN.DepthwiseSeparableConv1d.forward
#: speechbrain.nnet.CNN.DepthwiseSeparableConv2d
#: speechbrain.nnet.CNN.DepthwiseSeparableConv2d.forward
#: speechbrain.nnet.CNN.SincConv speechbrain.nnet.CNN.SincConv.forward
#: speechbrain.nnet.CNN.get_padding_elem
#: speechbrain.nnet.CNN.get_padding_elem_transposed
msgid "Parameters"
msgstr ""

#: of speechbrain.nnet.CNN.Conv1d:7 speechbrain.nnet.CNN.Conv2d:8
#: speechbrain.nnet.CNN.ConvTranspose1d:8 speechbrain.nnet.CNN.SincConv:6
msgid "The shape of the input. Alternatively use ``in_channels``."
msgstr ""

#: of speechbrain.nnet.CNN.Conv1d:9 speechbrain.nnet.CNN.Conv2d:10
#: speechbrain.nnet.CNN.ConvTranspose1d:10 speechbrain.nnet.CNN.SincConv:8
msgid "The number of input channels. Alternatively use ``input_shape``."
msgstr ""

#: of speechbrain.nnet.CNN.Conv1d:3 speechbrain.nnet.CNN.Conv2d:3
#: speechbrain.nnet.CNN.ConvTranspose1d:4
#: speechbrain.nnet.CNN.DepthwiseSeparableConv1d:6
#: speechbrain.nnet.CNN.DepthwiseSeparableConv2d:6
#: speechbrain.nnet.CNN.SincConv:10
msgid "It is the number of output channels."
msgstr ""

#: of speechbrain.nnet.CNN.Conv1d:5 speechbrain.nnet.CNN.ConvTranspose1d:6
#: speechbrain.nnet.CNN.DepthwiseSeparableConv1d:8
#: speechbrain.nnet.CNN.DepthwiseSeparableConv2d:8
#: speechbrain.nnet.CNN.SincConv:12
msgid "Kernel size of the convolutional filters."
msgstr ""

#: of speechbrain.nnet.CNN.Conv1d:11
#: speechbrain.nnet.CNN.DepthwiseSeparableConv1d:12
#: speechbrain.nnet.CNN.DepthwiseSeparableConv2d:10
#: speechbrain.nnet.CNN.SincConv:14
msgid ""
"Stride factor of the convolutional filters. When the stride factor > 1, a"
" decimation in time is performed."
msgstr ""

#: of speechbrain.nnet.CNN.Conv1d:14 speechbrain.nnet.CNN.ConvTranspose1d:15
#: speechbrain.nnet.CNN.DepthwiseSeparableConv1d:15
#: speechbrain.nnet.CNN.DepthwiseSeparableConv2d:13
#: speechbrain.nnet.CNN.SincConv:17
msgid "Dilation factor of the convolutional filters."
msgstr ""

#: of speechbrain.nnet.CNN.Conv1d:16
#: speechbrain.nnet.CNN.DepthwiseSeparableConv1d:17
#: speechbrain.nnet.CNN.DepthwiseSeparableConv2d:15
#: speechbrain.nnet.CNN.SincConv:19
msgid ""
"(same, valid, causal). If \"valid\", no padding is performed. If \"same\""
" and stride is 1, output shape is the same as the input shape. \"causal\""
" results in causal (dilated) convolutions."
msgstr ""

#: of speechbrain.nnet.CNN.Conv1d:20 speechbrain.nnet.CNN.Conv2d:21
#: speechbrain.nnet.CNN.DepthwiseSeparableConv1d:21
#: speechbrain.nnet.CNN.DepthwiseSeparableConv2d:19
#: speechbrain.nnet.CNN.SincConv:23
msgid ""
"This flag specifies the type of padding. See torch.nn documentation for "
"more information."
msgstr ""

#: of speechbrain.nnet.CNN.Conv2d:24 speechbrain.nnet.CNN.SincConv:26
msgid ""
"This option specifies the convolutional groups. See torch.nn "
"documentation for more information."
msgstr ""

#: of speechbrain.nnet.CNN.Conv2d:27
#: speechbrain.nnet.CNN.DepthwiseSeparableConv1d:24
#: speechbrain.nnet.CNN.DepthwiseSeparableConv2d:22
#: speechbrain.nnet.CNN.SincConv:29
msgid "If True, the additive bias b is adopted."
msgstr ""

#: of speechbrain.nnet.CNN.SincConv:31
msgid "Sampling rate of the input signals. It is only used for sinc_conv."
msgstr ""

#: of speechbrain.nnet.CNN.SincConv:33
msgid ""
"Lowest possible frequency (in Hz) for a filter. It is only used for "
"sinc_conv."
msgstr ""

#: of speechbrain.nnet.CNN.SincConv:36
msgid "Lowest possible value (in Hz) for a filter bandwidth."
msgstr ""

#: of speechbrain.nnet.CNN.Conv1d:28 speechbrain.nnet.CNN.Conv2d:31
#: speechbrain.nnet.CNN.ConvTranspose1d:44
#: speechbrain.nnet.CNN.DepthwiseSeparableConv1d:28
#: speechbrain.nnet.CNN.DepthwiseSeparableConv2d:26
#: speechbrain.nnet.CNN.SincConv:40
msgid "Example"
msgstr ""

#: of speechbrain.nnet.CNN.Conv1d.forward:1
#: speechbrain.nnet.CNN.Conv2d.forward:1
#: speechbrain.nnet.CNN.ConvTranspose1d.forward:1
#: speechbrain.nnet.CNN.DepthwiseSeparableConv1d.forward:1
#: speechbrain.nnet.CNN.DepthwiseSeparableConv2d.forward:1
#: speechbrain.nnet.CNN.SincConv.forward:1
msgid "Returns the output of the convolution."
msgstr ""

#: of speechbrain.nnet.CNN.Conv1d.forward:3
#: speechbrain.nnet.CNN.Conv2d.forward:3
#: speechbrain.nnet.CNN.ConvTranspose1d.forward:3
#: speechbrain.nnet.CNN.SincConv.forward:3
msgid "input to convolve. 2d or 4d tensors are expected."
msgstr ""

#: of speechbrain.nnet.CNN.Conv1d:23 speechbrain.nnet.CNN.ConvTranspose1d:39
msgid ""
"If False, uses batch x time x channel convention of speechbrain. If True,"
" uses batch x channel x time convention."
msgstr ""

#: of speechbrain.nnet.CNN.Conv2d:5
msgid "Kernel size of the 2d convolutional filters over time and frequency axis."
msgstr ""

#: of speechbrain.nnet.CNN.Conv2d:12
msgid ""
"Stride factor of the 2d convolutional filters over time and frequency "
"axis."
msgstr ""

#: of speechbrain.nnet.CNN.Conv2d:15
msgid ""
"Dilation factor of the 2d convolutional filters over time and frequency "
"axis."
msgstr ""

#: of speechbrain.nnet.CNN.Conv2d:18
msgid ""
"(same, valid). If \"valid\", no padding is performed. If \"same\" and "
"stride is 1, output shape is same as input shape."
msgstr ""

#: of speechbrain.nnet.CNN.ConvTranspose1d:1
msgid ""
"This class implements 1d transposed convolution with speechbrain. "
"Transpose convolution is normally used to perform upsampling."
msgstr ""

#: of speechbrain.nnet.CNN.ConvTranspose1d:12
msgid ""
"Stride factor of the convolutional filters. When the stride factor > 1, "
"upsampling in time is performed."
msgstr ""

#: of speechbrain.nnet.CNN.ConvTranspose1d:17
msgid ""
"To have in output the target dimension, we suggest tuning the kernel size"
" and the padding properly. We also support the following function to have"
" some control over the padding and the corresponding ouput "
"dimensionality. if \"valid\", no padding is applied if \"same\", padding "
"amount is inferred so that the output size is closest to possible to "
"input size. Note that for some kernel_size / stride combinations it is "
"not possible to obtain the exact same size, but we return the closest "
"possible size. if \"factor\", padding amount is inferred so that the "
"output size is closest to inputsize*stride. Note that for some "
"kernel_size / stride combinations it is not possible to obtain the exact "
"size, but we return the closest possible size. if an integer value is "
"entered, a custom padding is used."
msgstr ""

#: of speechbrain.nnet.CNN.ConvTranspose1d:32
msgid "Additional size added to one side of the output shape"
msgstr ""

#: of speechbrain.nnet.CNN.ConvTranspose1d:34
msgid ""
"Number of blocked connections from input channels to output channels. "
"Default: 1"
msgstr ""

#: of speechbrain.nnet.CNN.ConvTranspose1d:37
msgid "If True, adds a learnable bias to the output"
msgstr ""

#: of speechbrain.nnet.CNN.DepthwiseSeparableConv1d:3
#: speechbrain.nnet.CNN.DepthwiseSeparableConv2d:3
msgid ""
"First, a channel-wise convolution is applied to the input Then, a point-"
"wise convolution to project the input to output"
msgstr ""

#: of speechbrain.nnet.CNN.DepthwiseSeparableConv1d:10
msgid "Expected shape of the input."
msgstr ""

#: of speechbrain.nnet.CNN.DepthwiseSeparableConv1d.forward:3
#: speechbrain.nnet.CNN.DepthwiseSeparableConv2d.forward:3
msgid "input to convolve. 3d tensors are expected."
msgstr ""

