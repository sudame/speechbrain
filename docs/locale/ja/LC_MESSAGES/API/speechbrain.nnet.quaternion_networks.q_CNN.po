# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SpeechBrain
# This file is distributed under the same license as the SpeechBrain
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpeechBrain \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-07 13:45+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../API/speechbrain.nnet.quaternion_networks.q_CNN.rst:5
msgid "speechbrain.nnet.quaternion_networks.q_CNN module"
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN:1
msgid "Library implementing quaternion-valued convolutional neural networks."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN:4
msgid "Authors"
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN:4
msgid "Titouan Parcollet 2020"
msgstr ""

#: ../../API/speechbrain.nnet.quaternion_networks.q_CNN.rst:16
msgid "Summary"
msgstr ""

#: ../../API/speechbrain.nnet.quaternion_networks.q_CNN.rst:18
msgid "Classes:"
msgstr ""

#: ../../API/speechbrain.nnet.quaternion_networks.q_CNN.rst:32:<autosummary>:1
msgid ":obj:`QConv1d <speechbrain.nnet.quaternion_networks.q_CNN.QConv1d>`"
msgstr ""

#: ../../API/speechbrain.nnet.quaternion_networks.q_CNN.rst:32:<autosummary>:1
#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:1
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:1
msgid "This function implements quaternion-valued 1d convolution."
msgstr ""

#: ../../API/speechbrain.nnet.quaternion_networks.q_CNN.rst:32:<autosummary>:1
msgid ":obj:`QConv2d <speechbrain.nnet.quaternion_networks.q_CNN.QConv2d>`"
msgstr ""

#: ../../API/speechbrain.nnet.quaternion_networks.q_CNN.rst:34
msgid "Reference"
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:1
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:1
msgid "Bases: :class:`torch.nn.modules.module.Module`"
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv1d.forward
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d.forward
msgid "Parameters"
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:3
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:3
msgid "The shape of the input."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:5
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:5
msgid ""
"Number of output channels. Please note that these are quaternion-valued "
"neurons. If 256 channels are specified, the output dimension will be "
"1024."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:10
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:10
msgid "Kernel size of the convolutional filters."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:12
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:12
msgid "Stride factor of the convolutional filters (default 1)."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:14
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:14
msgid "Dilation factor of the convolutional filters (default 1)."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:16
msgid ""
"(same, valid, causal). If \"valid\", no padding is performed. If \"same\""
" and stride is 1, output shape is same as input shape. \"causal\" results"
" in causal (dilated) convolutions (default \"same\")."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:20
msgid ""
"This flag specifies the type of padding. See torch.nn documentation for "
"more information (default \"reflect\")."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:23
msgid ""
"Default: 1 This option specifies the convolutional groups. See torch.nn "
"documentation for more information (default 1)."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:27
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:25
msgid "If True, the additive bias b is adopted (default True)."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:29
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:27
msgid ""
"(glorot, he). This parameter controls the initialization criterion of the"
" weights. It is combined with weights_init to build the initialization "
"method of the quaternion-valued weights (default \"glorot\")."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:34
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:32
msgid ""
"(quaternion, unitary). This parameter defines the initialization "
"procedure of the quaternion-valued weights. \"quaternion\" will generate "
"random quaternion weights following the init_criterion and the quaternion"
" polar form. \"unitary\" will normalize the weights to lie on the unit "
"circle (default \"quaternion\"). More details in: \"Quaternion Recurrent "
"Neural Networks\", Parcollet T. et al."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:42
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:40
msgid ""
"When True, the layer will be turned into a spinor layer. More precisely "
"W*x will be turned into W*x*W-1. The input x will be rotated by W such as"
" in a spinor neural network. However, x MUST be a quaternion with the "
"real part equal to zero. (0 + xi + yj + zk). Indeed, the rotation "
"operation only acts on the vector part. Note that W will always be "
"normalized before the rotation to ensure the quaternion algebra (default "
"False). More details in: \"Quaternion neural networks\", Parcollet T."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:50
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:48
msgid ""
"The vector_scale is only used when spinor = True. In the context of a "
"spinor neural network, multiple rotations of the input vector x are "
"performed and summed. Hence, the norm of the output vector always "
"increases with the number of layers, making the neural network instable "
"with deep configurations. The vector_scale parameters are learnable "
"parameters that acts like gates by multiplying the output vector with a "
"small trainable parameter (default False)."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d:60
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:58
msgid "Example"
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d.forward:1
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d.forward:1
msgid "Returns the output of the convolution."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv1d.forward:3
#: speechbrain.nnet.quaternion_networks.q_CNN.QConv2d.forward:3
msgid "Input to convolve. 3d or 4d tensors are expected."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:16
msgid ""
"(same, causal). If \"valid\", no padding is performed. If \"same\" and "
"stride is 1, output shape is same as input shape (default \"same\")."
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:19
msgid ""
"This flag specifies the type of padding. See torch.nn documentation for "
"more information. (default \"reflect\")"
msgstr ""

#: of speechbrain.nnet.quaternion_networks.q_CNN.QConv2d:22
msgid ""
"This option specifies the convolutional groups. See torch.nn "
"documentation for more information. (default 1)."
msgstr ""

